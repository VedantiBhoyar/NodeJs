# Node.js Interview Preparation Guide

## Core Concepts

### 1. What is Node.js?

**Answer:**
Node.js is a runtime environment that allows you to run JavaScript code outside of a web browser. It’s built on Chrome’s V8 JavaScript engine. It helps in building fast and scalable server-side applications.

**Key Features:**

* **Single-threaded**: It handles all tasks in a single thread.
* **Asynchronous**: It doesn't wait for one task to finish before starting another.
* **Non-blocking I/O**: Helps handle many requests at the same time without blocking the process.
* **Cross-platform**: Works on Windows, Linux, macOS.
* Has access to NPM, which is the world's largest package library.

---

### 2. What is the Event Loop in Node.js?

**Answer:**
The Event Loop is how Node.js handles multiple tasks at once, even though it's single-threaded. It checks the task queue and executes tasks one by one in different phases.

**Phases:**

1. **Timers** – Executes functions scheduled by `setTimeout()` or `setInterval()`.
2. **Pending callbacks** – Executes callbacks that were delayed.
3. **Poll** – Checks for new I/O events.
4. **Check** – Executes `setImmediate()` functions.
5. **Close callbacks** – Executes tasks like socket closure.

**Also Important:** Microtasks like Promises run in between these phases.

---

### 3. What is Libuv?

**Answer:**
Libuv is a C-based library that Node.js uses under the hood. It manages:

* The event loop
* Threads for background tasks
* File system and network operations
* Works on all major operating systems

It helps Node.js perform tasks like reading files or handling network connections without blocking the main thread.

---

## Asynchronous Programming

### 4. Callbacks vs Promises vs Async/Await

| Type        | Benefits                        | Drawbacks                                 |
| ----------- | ------------------------------- | ----------------------------------------- |
| Callbacks   | Easy for small tasks            | Messy with many callbacks (callback hell) |
| Promises    | More readable and chainable     | Still needs `.then()` chaining            |
| Async/Await | Looks like normal code, cleaner | Must be inside an `async` function        |

**Example using async/await:**

const fetchData = async () => {
  try {
    const response = await fetch('https://api.example.com');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Error:', error);
  }
};


---

### 5. process.nextTick() vs setImmediate()

**Answer:**

* `process.nextTick()`: Runs just after the current task, before anything else.
* `setImmediate()`: Runs in the "check" phase, after I/O events.

**Order of execution:**


process.nextTick(() => console.log('NextTick'));
Promise.resolve().then(() => console.log('Promise'));
setImmediate(() => console.log('Immediate'));


**Output:** `NextTick -> Promise -> Immediate`

---

## Modules & NPM

### 6. How does require() work in Node.js?

**Answer:**
When you use `require('file')`, Node.js:

1. Finds the file path.
2. Loads the content of the file.
3. Wraps it in a function.
4. Runs the function.
5. Caches the result so it doesn’t load again.
6. Returns what was exported using `module.exports`.

---

### 7. Difference between package.json and package-lock.json

| File                | Use                                |
| ------------------- | ---------------------------------- |
| `package.json`      | Lists dependencies and metadata    |
| `package-lock.json` | Records exact versions of packages |

* `package.json` allows version ranges (like ^1.2.0)
* `package-lock.json` ensures everyone uses the same versions

---

## File System & Streams

### 8. What are Streams in Node.js?

**Answer:**
Streams are ways to read or write data piece by piece (chunks), instead of loading everything at once. There are:

* Readable Streams
* Writable Streams
* Duplex (both read & write)
* Transform (change data while reading/writing)

**Example:**


const fs = require('fs');

// Read from a file
const readable = fs.createReadStream('input.txt');

// Write to another file
const writable = fs.createWriteStream('output.txt');

// Copy data using pipe
readable.pipe(writable);


---

### 9. What is a Transform Stream?

**Answer:**
A Transform stream is a special stream that can both read and write, and also change (transform) the data while doing so.

**Example:**


const { Transform } = require('stream');

const toUpperCase = new Transform({
  transform(chunk, encoding, callback) {
    this.push(chunk.toString().toUpperCase());
    callback();
  }
});

process.stdin.pipe(toUpperCase).pipe(process.stdout);


---

## HTTP & Web Servers

### 10. How to create an HTTP server in Node.js?

**Answer:**
You can use the built-in `http` module:

const http = require('http');

const server = http.createServer((req, res) => {
  if (req.url === '/') {
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end('<h1>Hello from Node.js</h1>');
  }
});

server.listen(3000, () => console.log('Server running on port 3000'));


---

### 11. What is Middleware in Express.js?

**Answer:**
Middleware is a function that runs before your final request handler. It can read or modify the request and response, and move to the next step.

**Example:**

const express = require('express');
const app = express();

// Middleware to log request info
app.use((req, res, next) => {
  console.log(`${req.method} ${req.path}`);
  next();
});

app.get('/', (req, res) => res.send('Home Page'));

app.listen(3000);



